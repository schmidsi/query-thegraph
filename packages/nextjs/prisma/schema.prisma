// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  apiKey        String     @unique @default(cuid())
  subgraphs     Subgraph[]
  Safe          Safe?      @relation(fields: [safeAddress], references: [address])
  safeAddress   String?
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum DeployableChains {
  MAINNET
  ARBITRUM
  ARBITRUM_SEPOLIA
}

model Chain {
  id       Int        @id /// According to https://chainid.network/chains.json
  name     String     @unique
  Subgraph Subgraph[]
}

model Subgraph {
  id               String            @id @default(cuid())
  slug             String            @unique
  gone             Boolean           @default(false) /// Subgraph is not on the network anymore
  deployed         Boolean           @default(false) /// Subgraph is deployed to the network
  managed          Boolean           @default(false) /// Subgraph is managed from this app
  codeRepository   String?
  website          String?
  creatorAddress   String?
  signalledTokens  String?
  deployedChain    DeployableChains?
  indexedChain     Chain?            @relation(fields: [chainId], references: [id])
  chainId          Int?
  categories       String[]
  networkId        String?           @unique /// Subgraph id on The Graph Network
  name             String? // TODO: Download info from IPFS and make required
  displayName      String?
  description      String?
  imageURI         String?
  user             User?             @relation(fields: [userId], references: [id])
  userId           String?           @map("user_id")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  subgraphVersions SubgraphVersion[]
}

model SubgraphVersion {
  id         String   @id @default(cuid())
  networkId  String? /// Version id on The Graph Network
  // TODO: Rename to deploymentId
  ipfsHash   String // not unique since there might be multiple subgraphs with the same deployment?
  subgraph   Subgraph @relation(fields: [subgraphId], references: [id])
  subgraphId String   @map("subgraph_id")
  label      String
  schema     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([label, subgraphId])
}

model Safe {
  address   String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  owners    User[]
}
