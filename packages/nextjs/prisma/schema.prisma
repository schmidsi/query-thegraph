// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  apiKey        String     @unique @default(cuid())
  subgraphs     Subgraph[]
  Safe          Safe?      @relation(fields: [safeId], references: [id])
  safeId        String?
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subgraph {
  id               String            @id
  slug             String            @unique
  name             String
  description      String?
  user             User?             @relation(fields: [userId], references: [id])
  userId           String?           @map("user_id")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  subgraphVersions SubgraphVersion[]
}

model SubgraphVersion {
  id         String   @id
  subgraph   Subgraph @relation(fields: [subgraphId], references: [id])
  subgraphId String   @map("subgraph_id")
  version    String
  schema     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Safe {
  id        String   @id
  name      String
  address   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  owners    User[]
}
